# Google 实例
1.
访问gmail:		mail.google.com
自动跳到了登录页面	https://accounts.google.com/ServiceLogin?service=mail&passive=true&rm=false&continue=https://mail.google.com/mail/&ss=1&scc=1&ltmpl=default&ltmplcache=2&emr=1

2.
任意google系统登录后
(与goagent代理无关，不管是否使用代理，都能成功)
访问时直接进入Gmail		mail.google.com

3.
登录都是到主系统(www.google.com.hk)中。
主系统录登，访问子系统直接通过。
主系统退出，全部退出,访问子系统时，一发现没有session，直接跳到。	https://www.google.com/accounts/ServiceLogin?service=ah&passive=true&continue=https://appengine.google.com/_ah/conflogin%3Fcontinue%3Dhttps://appengine.google.com/&ltmpl=ae
									https://accounts.google.com/ServiceLogin?service=mail&passive=true&rm=false&continue=https://mail.google.com/mail/?shva%3D1&ss=1&scc=1&ltmpl=default&ltmplcache=2&emr=1#starred
appengine退出，跳转到，https://www.google.com/accounts/Logout?continue=https://appengine.google.com/_ah/logout%3Fcontinue%3Dhttps://appengine.google.com/start&service=ah
云盘退出了，gmail却没有；如果云盘里点退出，gmail就退了。 这与它自身session机制有关。。。）
Gmail退出，www.google.com也退出。退出时的默认页面为https://accounts.google.com/ServiceLogin?service=mail&passive=true&rm=false&continue=https://mail.google.com/mail/&ss=1&scc=1&ltmpl=default&ltmplcache=2&hl=zh-CN&emr=1
云盘登录后，www.google.com也登录.
子系统登录后，刷新https://accounts.google.com/ServiceLogin?service=mail&passive=true&rm=false&continue=htt..页面将直接进入continue页面.



*我的SSO规则
1.一系统登录,全部登录.
2.一系统登出,除独立外，全部登出.
3.每次接收到请求都去Server上验证，还是自己保管session？
	分三类：1.stand alone	SA	独立：登录单点，登出独立，自己保管session，不受其他系统登出影响（别人登出了不知道）,但能影响“同步”者。
		2.real time	RT	实时：实时（Server push,Socket）向Server端校验session，一有系统退出就窗口提示。
		3.every time	ET	每次：每次对子系统的操作，系统都会拿ticket到Server上去校验(每次访问就跳转到Server端校验，用户体验太差)
4.三类中，最常用的应该是3.ET
5.提供Filter(拦截过滤访问)，JSP标签（登出按钮，登录按钮，拦截过滤访问）
6.退出的按钮，默认为SSO-S上的登录页面with Continue
7.Continue or Referer
8.Redis建立session会话池{key: username, value: session}，用于RT模式下Client与Server间的bind
9.RT模式，子系统首次登录都要先跳转到SSO-S再跳回来，以建立对应的session.


*问题
1.用户在子系统中的操作，session如何更新到主系统中，以防止主系统长时间session丢效，特别是RT类??



http://154.189.1.50:8888/comet